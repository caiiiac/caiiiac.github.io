<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | The scarecrow's blog]]></title>
  <link href="http://caiiiac.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://caiiiac.github.io/"/>
  <updated>2015-08-10T15:39:44+08:00</updated>
  <id>http://caiiiac.github.io/</id>
  <author>
    <name><![CDATA[caiiiac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSAttributedString 文本属性详解]]></title>
    <link href="http://caiiiac.github.io/blog/2015/08/10/nsattributedstring-wen-ben-shu-xing-xiang-jie/"/>
    <updated>2015-08-10T14:03:23+08:00</updated>
    <id>http://caiiiac.github.io/blog/2015/08/10/nsattributedstring-wen-ben-shu-xing-xiang-jie</id>
    <content type="html"><![CDATA[<h2>NSAttributedString包含的所有Key</h2>

<pre><code>NSFontAttributeName;                  //字体，value是UIFont对象
NSParagraphStyleAttributeName;        //绘图的风格（居中，换行模式，间距等诸多风格），value是NSParagraphStyle对象
NSForegroundColorAttributeName;       // 文字颜色，value是UIFont对象
NSBackgroundColorAttributeName;       // 背景色，value是UIFont
NSLigatureAttributeName;              //  字符连体，value是NSNumber
NSKernAttributeName;                  // 字符间隔
NSStrikethroughStyleAttributeName;    //删除线，value是NSNumber
NSUnderlineStyleAttributeName;        //下划线，value是NSNumber
NSStrokeColorAttributeName;           //描绘边颜色，value是UIColor
NSStrokeWidthAttributeName;           //描边宽度，value是NSNumber
NSShadowAttributeName;                //阴影，value是NSShadow对象
NSTextEffectAttributeName;            //文字效果，value是NSString
NSAttachmentAttributeName;            //附属，value是NSTextAttachment 对象
NSLinkAttributeName;                  //链接，value是NSURL or NSString
NSBaselineOffsetAttributeName;        //基础偏移量，value是NSNumber对象
NSUnderlineColorAttributeName;        //下划线颜色，value是UIColor对象
NSStrikethroughColorAttributeName;    //删除线颜色，value是UIColor
NSObliquenessAttributeName;           //字体倾斜
NSExpansionAttributeName;             //字体扁平化
NSVerticalGlyphFormAttributeName;     //垂直或者水平，value是 NSNumber，0表示水平，1垂直
</code></pre>

<p>第一步创建UILabel及NSMutableAttributedString的实例对象,之后的效果改变都是作用在它们上面:</p>

<pre><code>UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, self.view.bounds.size.width - 40, 50)];
label.textAlignment = NSTextAlignmentCenter;
label.center = self.view.center;
[self.view addSubview:label];

NSMutableAttributedString *attributedString = [[NSMutableAttributedString alloc] initWithString:@"caiiiac.github.io"];
</code></pre>

<p><strong>字体 颜色 背景色</strong></p>

<ul>
<li><code>NSFontAttributeName</code></li>
<li><code>NSForegroundColorAttributeName</code></li>
<li><code>NSBackgroundColorAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/60734898-ECE5-44D4-898D-E6EF83D7651E.png" alt="字体 颜色 背景色" /></p>

<p>代码</p>

<pre><code>NSDictionary * attris = @{NSForegroundColorAttributeName:[UIColor whiteColor],
              NSBackgroundColorAttributeName:[UIColor grayColor],
              NSFontAttributeName:[UIFont boldSystemFontOfSize:30]};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p><strong>下划线</strong></p>

<ul>
<li><code>NSUnderlineStyleAttributeName</code></li>
<li><code>NSUnderlineColorAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/6F199774-62FD-4553-AC2C-F0132641DCB7.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSDictionary * attris = @{NSFontAttributeName:[UIFont boldSystemFontOfSize:30],
              NSForegroundColorAttributeName:[UIColor orangeColor],                          
              NSUnderlineStyleAttributeName:@(NSUnderlineStyleSingle),                             
              NSUnderlineColorAttributeName:[UIColor blueColor],};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p><strong>描边</strong></p>

<ul>
<li><code>NSStrokeColorAttributeName</code></li>
<li><code>NSStrokeWidthAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/0C9788C6-1AB5-43E2-9C39-0605E22F2990.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSDictionary * attris = @{NSFontAttributeName:[UIFont boldSystemFontOfSize:30],
              NSForegroundColorAttributeName:[UIColor whiteColor],
              NSStrokeColorAttributeName:[UIColor blueColor],
              NSStrokeWidthAttributeName:@(2)};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p><strong>阴影</strong></p>

<ul>
<li><code>NSShadowAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/FC216299-3DFD-4897-9340-1BDCD9EE1C7A.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSShadow * shadow = [[NSShadow alloc] init];
shadow.shadowColor = [UIColor blueColor];
shadow.shadowBlurRadius = 4.0;
shadow.shadowOffset = CGSizeMake(2.0, 2.0);
NSDictionary * attris = @{NSFontAttributeName:[UIFont systemFontOfSize:30],
              NSShadowAttributeName:shadow};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p><strong>字符间隔</strong></p>

<ul>
<li><code>NSKernAttributeName</code></li>
</ul>


<p>默认间隔</p>

<p><img src="/imagesWithBlog/1B2B4760-01BD-44C8-90A1-41B1B101B622.png" alt="下划线" /></p>

<p>间隔为5</p>

<p><img src="/imagesWithBlog/D7997F03-CE7E-4689-8E2E-23C6318CE56D.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSDictionary * attris = @{NSKernAttributeName:@(5),
              NSFontAttributeName:[UIFont systemFontOfSize:30]};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p><strong>字体倾斜</strong></p>

<ul>
<li><code>NSObliquenessAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/A3BCEAB0-8946-4A3F-8545-A0CD624047D3.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSDictionary * attris = @{NSObliquenessAttributeName:@(0.8),
              NSFontAttributeName:[UIFont systemFontOfSize:30]};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p><strong>字体扁平化</strong></p>

<ul>
<li><code>NSExpansionAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/E00D97D1-F0AC-4ED3-82C5-96FA8BA19551.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSDictionary * attris = @{NSExpansionAttributeName:@(1.0),
              NSFontAttributeName:[UIFont systemFontOfSize:30]};

[attributedString setAttributes:attris range:NSMakeRange(0,attributedString.length)];
label.attributedText = attributedString;
</code></pre>

<p>添加图片</p>

<ul>
<li><code>NSAttachmentAttributeName</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/3A996070-E495-48B8-A3D1-39B217D28866.png" alt="下划线" /></p>

<p>代码</p>

<pre><code>NSTextAttachment * attach = [[NSTextAttachment alloc] init];
attach.image = [UIImage imageNamed:@"收藏后"];
attach.bounds = CGRectMake(2, -4, 20, 20);
NSAttributedString * imageStr = [NSAttributedString attributedStringWithAttachment:attach];

[attributedString appendAttributedString:imageStr];

label.attributedText = attributedString;
</code></pre>

<p>绘图风格</p>

<ul>
<li><code>NSMutableParagraphStyle</code></li>
</ul>


<p>效果</p>

<p><img src="/imagesWithBlog/021BF7E2-1BE4-4509-B70C-95268B594D8C.png" alt="下划线" /></p>

<p>代码
自定义TextView类</p>

<pre><code>@implementation TextView

- (void)drawRect:(CGRect)rect {
// Drawing code

    NSMutableAttributedString * attributeStr = [[NSMutableAttributedString alloc] initWithString:@"绘图风格（居中，换行模式，间距等诸多风格），value是NSParagraphStyle对象"];
    NSMutableParagraphStyle * paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    paragraphStyle.alignment = NSTextAlignmentRight;
    paragraphStyle.headIndent = 4.0;
    paragraphStyle.lineBreakMode = NSLineBreakByCharWrapping;
    paragraphStyle.lineSpacing = 2.0;
    NSDictionary * attributes = @{NSParagraphStyleAttributeName:paragraphStyle};
    [attributeStr setAttributes:attributes range:NSMakeRange(0, attributeStr.length)];
    [attributeStr drawInRect:self.bounds];

}

@end
</code></pre>

<p>ViewController中添加代码</p>

<pre><code>TextView *textView = [[TextView alloc] initWithFrame:CGRectMake(0, 0, 100, 80)];
textView.backgroundColor = [UIColor whiteColor];
textView.center = CGPointMake(self.view.center.x, self.view.center.y + 30);
[self.view addSubview:textView];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSCalendar &amp; NSDate​Components]]></title>
    <link href="http://caiiiac.github.io/blog/2015/08/07/nscalendar-and-nsdatecomponents/"/>
    <updated>2015-08-07T17:01:59+08:00</updated>
    <id>http://caiiiac.github.io/blog/2015/08/07/nscalendar-and-nsdatecomponents</id>
    <content type="html"><![CDATA[<ul>
<li>NSDate只是一个绝对的时间</li>
<li>NSCalendar对世界上现存的常用的历法进行了封装,既提供了不同历法的时间信息,又支持日历的计算</li>
<li>NSDateComponents是一个容器,详细包含了年月日时分等信息.将时间表示成适合阅读和使用的方式</li>
<li>NSDateComponents可以快速而简单地获取某个时间点对应的年, 月,日,时,分,秒,周等信息.例如:三个月，2年，7天，15分钟，60秒等等</li>
<li>NSDateComponents的返回值day, week, weekday, month, year 都是从1开始</li>
</ul>


<p><strong> 当前时间的 年 月 日 时 分</strong></p>

<pre><code>NSDate * date = [NSDate date];//当前时间
NSCalendar * calendar = [NSCalendar currentCalendar];//当前用户的calendar
NSDateComponents * components = [calendar components:NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute fromDate:date];
NSLog(@"%ld月%ld日%ld时%ld分" ,(long)components.month,(long)components.day,(long)components.hour,(long)components.minute);
</code></pre>

<p><strong>今天是今年的第几周</strong></p>

<pre><code>NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * currentDate = [NSDate date];
NSInteger week = [calendar ordinalityOfUnit:NSCalendarUnitWeekday inUnit:NSCalendarUnitYear forDate:currentDate];
NSLog(@"今天是今年的第%ld周",week);
</code></pre>

<p><strong>指定年 月 日 时 分 秒 得到 NSDate</strong></p>

<pre><code>NSDateComponents * components = [[NSDateComponents alloc] init];
components.year = 2015;
components.month = 8;
components.day = 7;
components.hour = 11;
components.minute = 11;
components.second = 11;
NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * date = [calendar dateFromComponents:components];

NSDateFormatter * formatter = [[NSDateFormatter alloc] init];
formatter.dateFormat = @"yyyy年MM月dd日hh时mm分ss秒";
NSString * time = [formatter stringFromDate:date];
NSLog(@"%@",time);
</code></pre>

<p><strong>7天12小时之后</strong></p>

<pre><code>NSDateComponents * components = [[NSDateComponents alloc] init];

components.day = 7;
components.hour = 12;
NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * currentDate = [NSDate date];
NSDate * nextData = [calendar dateByAddingComponents:components toDate:currentDate options:NSCalendarMatchStrictly];
NSDateFormatter * formatter = [[NSDateFormatter alloc] init];

formatter.dateFormat = @"yyyy年MM月dd日hh时mm分ss秒";
NSString * after = [formatter stringFromDate:nextData];
NSLog(@"7天12小时之后的时间:%@",after);
</code></pre>

<p><strong>这个月有几天</strong></p>

<pre><code>NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * currentDate = [NSDate date];
NSRange range = [calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:currentDate];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用宏汇总]]></title>
    <link href="http://caiiiac.github.io/blog/2015/08/07/chang-yong-hong-hui-zong/"/>
    <updated>2015-08-07T15:54:02+08:00</updated>
    <id>http://caiiiac.github.io/blog/2015/08/07/chang-yong-hong-hui-zong</id>
    <content type="html"><![CDATA[<p>NSString</p>

<p>以@方式生成的字符串，会作为字符串常量，在程序过程中，会一直存在，占用着内存。</p>

<pre><code>#define STR(str) [NSString stringWithCString:(str) encoding:NSUTF8StringEncoding]

#define STR(str)[[NSString alloc] initWithUTF8String:str];
</code></pre>

<p>IOS7判断</p>

<pre><code>#define IOS7 [[[UIDevice currentDevice]systemVersion] floatValue]&gt;=7.0
</code></pre>

<p>屏幕宽高</p>

<pre><code>#define kScreenWidth [[UIScreen mainScreen] bounds].size.width
#define kScreenHeight [[UIScreen mainScreen] bounds].size.height
</code></pre>

<p>颜色</p>

<pre><code>//RGB
#define RGBA(R, G, B, A) [UIColor colorWithRed:R/255.0f green:G/255.0f blue:B/255.0f alpha:A]

//（16进制-&gt;10进制）  
#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]  

//透明色
#define CLEARCOLOR [UIColor clearColor] 
</code></pre>

<p>图片</p>

<pre><code>//读取本地图片 
#define LOADIMAGE(file,type) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]  

//定义UIImage对象 
#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]  
</code></pre>

<p>weakSelf</p>

<pre><code>#define WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;
</code></pre>

<p>重写NSLog,Debug模式下打印日志和当前行数</p>

<pre><code>#if DEBUG  
#define NSLog(FORMAT, ...) fprintf(stderr,"\nfunction:%s line:%d content:%s\n", __FUNCTION__, __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);  
#else  
#define NSLog(FORMAT, ...) nil  
#endif 
</code></pre>

<p>判断是真机还是模拟器</p>

<pre><code>#if TARGET_OS_IPHONE  
//iPhone Device  
#endif  

#if TARGET_IPHONE_SIMULATOR  
//iPhone Simulator  
#endif  
</code></pre>
]]></content>
  </entry>
  
</feed>
