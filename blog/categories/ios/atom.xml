<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | The scarecrow's blog]]></title>
  <link href="http://caiiiac.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://caiiiac.github.io/"/>
  <updated>2015-08-07T17:42:15+08:00</updated>
  <id>http://caiiiac.github.io/</id>
  <author>
    <name><![CDATA[caiiiac]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSCalendar &amp; NSDate​Components]]></title>
    <link href="http://caiiiac.github.io/blog/2015/08/07/nscalendar-and-nsdatecomponents/"/>
    <updated>2015-08-07T17:01:59+08:00</updated>
    <id>http://caiiiac.github.io/blog/2015/08/07/nscalendar-and-nsdatecomponents</id>
    <content type="html"><![CDATA[<ul>
<li>NSDate只是一个绝对的时间</li>
<li>NSCalendar对世界上现存的常用的历法进行了封装,既提供了不同历法的时间信息,又支持日历的计算</li>
<li>NSDateComponents是一个容器,详细包含了年月日时分等信息.将时间表示成适合阅读和使用的方式</li>
<li>NSDateComponents可以快速而简单地获取某个时间点对应的年, 月,日,时,分,秒,周等信息.例如:三个月，2年，7天，15分钟，60秒等等</li>
<li>NSDateComponents的返回值day, week, weekday, month, year 都是从1开始</li>
</ul>


<p><strong> 当前时间的 年 月 日 时 分</strong></p>

<pre><code>NSDate * date = [NSDate date];//当前时间
NSCalendar * calendar = [NSCalendar currentCalendar];//当前用户的calendar
NSDateComponents * components = [calendar components:NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitHour | NSCalendarUnitMinute fromDate:date];
NSLog(@"%ld月%ld日%ld时%ld分" ,(long)components.month,(long)components.day,(long)components.hour,(long)components.minute);
</code></pre>

<p><strong>今天是今年的第几周</strong></p>

<pre><code>NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * currentDate = [NSDate date];
NSInteger week = [calendar ordinalityOfUnit:NSCalendarUnitWeekday inUnit:NSCalendarUnitYear forDate:currentDate];
NSLog(@"今天是今年的第%ld周",week);
</code></pre>

<p><strong>指定年 月 日 时 分 秒 得到 NSDate</strong></p>

<pre><code>NSDateComponents * components = [[NSDateComponents alloc] init];
components.year = 2015;
components.month = 8;
components.day = 7;
components.hour = 11;
components.minute = 11;
components.second = 11;
NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * date = [calendar dateFromComponents:components];

NSDateFormatter * formatter = [[NSDateFormatter alloc] init];
formatter.dateFormat = @"yyyy年MM月dd日hh时mm分ss秒";
NSString * time = [formatter stringFromDate:date];
NSLog(@"%@",time);
</code></pre>

<p><strong>7天12小时之后</strong></p>

<pre><code>NSDateComponents * components = [[NSDateComponents alloc] init];

components.day = 7;
components.hour = 12;
NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * currentDate = [NSDate date];
NSDate * nextData = [calendar dateByAddingComponents:components toDate:currentDate options:NSCalendarMatchStrictly];
NSDateFormatter * formatter = [[NSDateFormatter alloc] init];

formatter.dateFormat = @"yyyy年MM月dd日hh时mm分ss秒";
NSString * after = [formatter stringFromDate:nextData];
NSLog(@"7天12小时之后的时间:%@",after);
</code></pre>

<p><strong>这个月有几天</strong></p>

<pre><code>NSCalendar * calendar = [NSCalendar currentCalendar];
NSDate * currentDate = [NSDate date];
NSRange range = [calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:currentDate];
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用宏汇总]]></title>
    <link href="http://caiiiac.github.io/blog/2015/08/07/chang-yong-hong-hui-zong/"/>
    <updated>2015-08-07T15:54:02+08:00</updated>
    <id>http://caiiiac.github.io/blog/2015/08/07/chang-yong-hong-hui-zong</id>
    <content type="html"><![CDATA[<p>NSString</p>

<p>以@方式生成的字符串，会作为字符串常量，在程序过程中，会一直存在，占用着内存。</p>

<pre><code>#define STR(str) [NSString stringWithCString:(str) encoding:NSUTF8StringEncoding]

#define STR(str)[[NSString alloc] initWithUTF8String:str];
</code></pre>

<p>IOS7判断</p>

<pre><code>#define IOS7 [[[UIDevice currentDevice]systemVersion] floatValue]&gt;=7.0
</code></pre>

<p>屏幕宽高</p>

<pre><code>#define kScreenWidth [[UIScreen mainScreen] bounds].size.width
#define kScreenHeight [[UIScreen mainScreen] bounds].size.height
</code></pre>

<p>颜色</p>

<pre><code>//RGB
#define RGBA(R, G, B, A) [UIColor colorWithRed:R/255.0f green:G/255.0f blue:B/255.0f alpha:A]

//（16进制-&gt;10进制）  
#define UIColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]  

//透明色
#define CLEARCOLOR [UIColor clearColor] 
</code></pre>

<p>图片</p>

<pre><code>//读取本地图片 
#define LOADIMAGE(file,type) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:type]]  

//定义UIImage对象 
#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]  
</code></pre>

<p>weakSelf</p>

<pre><code>#define WS(weakSelf)  __weak __typeof(&amp;*self)weakSelf = self;
</code></pre>

<p>重写NSLog,Debug模式下打印日志和当前行数</p>

<pre><code>#if DEBUG  
#define NSLog(FORMAT, ...) fprintf(stderr,"\nfunction:%s line:%d content:%s\n", __FUNCTION__, __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);  
#else  
#define NSLog(FORMAT, ...) nil  
#endif 
</code></pre>

<p>判断是真机还是模拟器</p>

<pre><code>#if TARGET_OS_IPHONE  
//iPhone Device  
#endif  

#if TARGET_IPHONE_SIMULATOR  
//iPhone Simulator  
#endif  
</code></pre>
]]></content>
  </entry>
  
</feed>
